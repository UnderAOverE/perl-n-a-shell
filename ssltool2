#
#-----------------------------------------------------------------------------------------------------------------#
#
# Tool Name : ssltool.pl.
# Date of birth : 12/17/2015.
# Author : Shane Reddy.
# 
#
# 
#-----------------------------------------------------------------------------------------------------------------#
#
#-----------------------------------------------------------------------------------------------------------------#
# Global and modules imports.
#-----------------------------------------------------------------------------------------------------------------#
use warnings;
use English;
use strict;
#-----------------------------------------------------------------------------------------------------------------#
# Initialization.
#-----------------------------------------------------------------------------------------------------------------#
my $got_generate=0;
my $got_keystore=0;
my $got_enc=0;
my $got_dec=0;
my $got_plain=0;
my $got_check=0;
my $got_verify=0;
my $got_unstash=0;
my $keystore_file;
my $enc_string;
my $dec_string;
my $stash_file;
my $input_password;
my $private_key;
my $certificate;
my $version = "1.0v";
#-----------------------------------------------------------------------------------------------------------------#
# Subroutines.
#-----------------------------------------------------------------------------------------------------------------#
sub print_usage {
    custom_print("usage sub.")
}
sub custom_print {my $print_string = shift;print "$print_string\n";}
sub reset_variables {
    $got_keystore=0;
    $got_enc=0;
    $got_dec=0;
    $got_plain=0;
    $got_check=0;
    $got_verify=0;
    $got_generate=0;
	$got_unstash=0;
}
sub read_input_arguments {
    my $argument_counter = 0;
    foreach my $input_argument (@ARGV) {
	        $argument_counter = 0;
	        input_switch:  {
                           ($input_argument =~ /^(-file)$|^(-f)$/i) && do {
						                                                   if ($#ARGV < 1) {
																		      print STDERR "provide filename after \"$input_argument\".";
																			  exit 1;
																		   }
																		   $argument_counter++;
																		   $keystore_file = $ARGV[$argument_counter];
																		   unless (-f $keystore_file) {
																		          print STDERR "$keystore_file does not exist.";
																				  exit 1;
																		   }
																		   shift @ARGV;
																		   shift @ARGV;
                                                                           &reset_variables;
																		   $got_keystore=1;
																		   last input_switch;
                                                                           };
                           ($input_argument =~ /^(-enc)$|^(-e)$/i) && do {
                                                                           if ($#ARGV < 1) {
																		      print STDERR "provide string after \"$input_argument\" to encrypt.";
																			  exit 1;
																		   }
																		   $argument_counter++;
																		   $enc_string = $ARGV[$argument_counter];
																		   shift @ARGV;
																		   shift @ARGV;
																		   &reset_variables;
																		   $got_enc=1;
																		   last input_switch;
																		   };
                           ($input_argument =~ /^(-dec)$|^(-d)$/i) && do {
                                                                           if ($#ARGV < 1) {
																		      print STDERR "provide string after \"$input_argument\" to decrypt.";
																			  exit 1;
																		   }
																		   $argument_counter++;
																		   $dec_string = $ARGV[$argument_counter];
																		   shift @ARGV;
																		   shift @ARGV;
																		   &reset_variables;
																		   $got_dec=1;
																		   last input_switch;
																		   };
                           ($input_argument =~ /^(-version)$/) && do {
	                                                                       print "$0 Version: $version\n";
                                                                           exit 0;
				                                                           last input_switch;     
                                                                           };
                           ($input_argument =~ /^(-h)$|^(-help)$/) && do {    
		                                                                   &print_usage;
                                                                           exit 0;
                                                                           last input_switch;
																		   };
                           ($input_argument =~ /^(-check)$|^(-c)$/i) && do {
						                                                   if ($#ARGV < 1) {
																		      print STDERR "provide password after \"$input_argument\" to check ".
																			  "if it is in the repositories";
																			  exit 1;
																		   }
																		   $argument_counter++;
																		   $input_password = $ARGV[$argument_counter];
																		   shift @ARGV;
																		   shift @ARGV;
																		   &reset_variables;
                                                                           $got_check = 1;
																		   last input_switch;
																		   };
                           ($input_argument =~ /^(-verify)$/i) && do {
                                                                           if ($#ARGV < 2) {
																		      print STDERR "provide private key and certificate after \"$input_argument\" ".
																			  "to verify if the private key generated the certificate.";
																			  exit 1;
																		   }
																		   unless (-f $private_key) {
																		          print STDERR "$private_key does not exist.";
																				  exit 1;
																		   }
																		   unless (-f $certificate) {
																		          print STDERR "$certificate does not exist.";
																				  exit 1;
																		   }
																		   $argument_counter++;
																		   $private_key = $ARGV[$argument_counter];
																		   $argument_counter++;
																		   $certificate = $ARGV[$argument_counter];
																		   shift @ARGV;
																		   shift @ARGV;
																		   shift @ARGV;
																		   &reset_variables;
                                                                           $got_verify = 1;
																		   last input_switch;
																		   };
                           ($input_argument =~ /^(-plain)$|^(-p)$/i) && do {
						                                                   &reset_variables;
                                                                           $got_plain = 1;
																		   shift;
                                                                           last input_switch;
																		   };
                           print STDERR "ERROR: \"$input_argument\" is not a recognized command line input, exiting!\n";
	                       exit 1;
            }
    }
}
sub reveal_passwords {
    custom_print("Warning: passwords will be printed in plaintext.");
	exit 0;
}
sub encrypt_string {
    custom_print("encrypting the string $enc_string.");
	exit 0;
}
sub decrypt_string {
    custom_print("decrypting the string $dec_string.");
	exit 0;
}
sub check_password {
    custom_print("checking $input_password in the repositories.");
	exit 0;
}
sub keystore_main {
    custom_print("check password for $keystore_file.");
    exit 0;
}
sub prpub_verify {
    custom_print("will check $private_key and $certificate.")    ;
	exit 0;
}
&read_input_arguments;
if ($got_check==1) {&check_password;}
if ($got_verify==1) {&prpub_verify;}
if ($got_keystore==1) {&keystore_main;}
if ($got_enc==1) {&encrypt_string;}
if ($got_dec==1) {&decrypt_string;}
if ($got_plain==1) {&reveal_passwords;}
exit 0;
